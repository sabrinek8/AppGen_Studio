{
  "/App.js": "import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home';\nimport Profile from './pages/Profile';\nimport CreateMemory from './pages/CreateMemory';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Navbar />\n        <main className=\"main-content\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/profile\" element={<Profile />} />\n            <Route path=\"/create\" element={<CreateMemory />} />\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  );\n}\n",
  "/App.css": "* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f8f9fa;\n  color: #333;\n}\n\n.app {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.main-content {\n  flex: 1;\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.container {\n  width: 100%;\n  padding: 20px;\n}\n\n.btn {\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 600;\n  transition: background-color 0.3s, transform 0.2s;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n}\n\n.btn-primary {\n  background-color: #4361ee;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #3a56d4;\n}\n\n.btn-secondary {\n  background-color: #e9ecef;\n  color: #333;\n}\n\n.btn-secondary:hover {\n  background-color: #dde2e6;\n}\n\n.memories-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n}\n\n.page-title {\n  margin-bottom: 20px;\n  color: #2b2d42;\n  font-size: 2rem;\n}\n\n.section {\n  margin-bottom: 25px;\n}\n",
  "/components/Navbar.js": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navbar.css';\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-container\">\n        <Link to=\"/\" className=\"navbar-logo\">\n          MemoryKeeper\n        </Link>\n        <ul className=\"nav-menu\">\n          <li className=\"nav-item\">\n            <Link to=\"/\" className=\"nav-link\">\n              Souvenirs\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/profile\" className=\"nav-link\">\n              Profil\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/create\" className=\"nav-link create-btn\">\n              Nouveau Souvenir\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n",
  "/components/Navbar.css": ".navbar {\n  background-color: #ffffff;\n  height: 70px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: sticky;\n  top: 0;\n  z-index: 999;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.navbar-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 1200px;\n  padding: 0 20px;\n}\n\n.navbar-logo {\n  color: #4361ee;\n  font-size: 1.8rem;\n  font-weight: bold;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n}\n\n.nav-menu {\n  display: flex;\n  align-items: center;\n  list-style: none;\n  text-align: center;\n}\n\n.nav-item {\n  height: 70px;\n  display: flex;\n  align-items: center;\n  margin-left: 20px;\n}\n\n.nav-link {\n  color: #333;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.nav-link:hover {\n  color: #4361ee;\n}\n\n.create-btn {\n  background-color: #4361ee;\n  color: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n\n.create-btn:hover {\n  background-color: #3a56d4;\n  color: white;\n}\n\n@media screen and (max-width: 768px) {\n  .navbar-container {\n    padding: 0 10px;\n  }\n  \n  .nav-menu {\n    display: grid;\n    grid-template-columns: repeat(3, auto);\n    grid-gap: 10px;\n    list-style: none;\n    text-align: center;\n    width: 60vw;\n    justify-content: end;\n  }\n  \n  .nav-item {\n    margin-left: 0;\n  }\n  \n  .nav-link {\n    padding: 0.5rem;\n  }\n  \n  .navbar-logo {\n    font-size: 1.5rem;\n  }\n}\n",
  "/components/MemoryCard.js": "import React from 'react';\nimport './MemoryCard.css';\nimport { formatDate } from '../utils/dateUtils';\n\nexport default function MemoryCard({ memory }) {\n  const { title, date, imageUrl, description } = memory;\n  \n  return (\n    <div className=\"memory-card\">\n      <div className=\"memory-image-container\">\n        <img src={imageUrl} alt={title} className=\"memory-image\" />\n      </div>\n      <div className=\"memory-content\">\n        <h3 className=\"memory-title\">{title}</h3>\n        <p className=\"memory-date\">{formatDate(date)}</p>\n        <p className=\"memory-description\">{description}</p>\n      </div>\n    </div>\n  );\n}\n",
  "/components/MemoryCard.css": ".memory-card {\n  background-color: white;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.memory-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);\n}\n\n.memory-image-container {\n  height: 200px;\n  overflow: hidden;\n}\n\n.memory-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: transform 0.5s ease;\n}\n\n.memory-card:hover .memory-image {\n  transform: scale(1.05);\n}\n\n.memory-content {\n  padding: 15px;\n}\n\n.memory-title {\n  font-size: 1.2rem;\n  margin-bottom: 5px;\n  color: #2b2d42;\n}\n\n.memory-date {\n  font-size: 0.9rem;\n  color: #6c757d;\n  margin-bottom: 10px;\n}\n\n.memory-description {\n  font-size: 0.95rem;\n  color: #495057;\n  line-height: 1.4;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n",
  "/components/MemoryForm.js": "import React, { useState } from 'react';\nimport './MemoryForm.css';\n\nexport default function MemoryForm({ onSubmit }) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [errors, setErrors] = useState({});\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!title.trim()) newErrors.title = 'Le titre est requis';\n    if (!date) newErrors.date = 'La date est requise';\n    if (!imageUrl) newErrors.imageUrl = 'Une image est requise';\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setImageUrl(file);\n      // Create URL preview\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreviewUrl(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      onSubmit({ title, description, date, imageUrl });\n      // Reset form\n      setTitle('');\n      setDescription('');\n      setDate('');\n      setImageUrl('');\n      setPreviewUrl('');\n    }\n  };\n\n  return (\n    <form className=\"memory-form\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">Titre</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className={errors.title ? 'error' : ''}\n        />\n        {errors.title && <span className=\"error-message\">{errors.title}</span>}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"date\">Date</label>\n        <input\n          type=\"date\"\n          id=\"date\"\n          value={date}\n          onChange={(e) => setDate(e.target.value)}\n          className={errors.date ? 'error' : ''}\n        />\n        {errors.date && <span className=\"error-message\">{errors.date}</span>}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"description\">Description</label>\n        <textarea\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows=\"4\"\n        ></textarea>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"image\">Image</label>\n        <input\n          type=\"file\"\n          id=\"image\"\n          accept=\"image/*\"\n          onChange={handleImageChange}\n          className={errors.imageUrl ? 'error' : ''}\n        />\n        {errors.imageUrl && <span className=\"error-message\">{errors.imageUrl}</span>}\n        \n        {previewUrl && (\n          <div className=\"image-preview\">\n            <img src={previewUrl} alt=\"Preview\" />\n          </div>\n        )}\n      </div>\n\n      <button type=\"submit\" className=\"btn btn-primary submit-btn\">\n        Enregistrer le souvenir\n      </button>\n    </form>\n  );\n}\n",
  "/components/MemoryForm.css": ".memory-form {\n  background-color: white;\n  padding: 25px;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 500;\n  color: #2b2d42;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  transition: border-color 0.3s;\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n  border-color: #4361ee;\n  outline: none;\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e63946;\n}\n\n.error-message {\n  color: #e63946;\n  font-size: 0.85rem;\n  margin-top: 5px;\n  display: block;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 12px;\n  margin-top: 10px;\n  font-size: 1rem;\n}\n\n.image-preview {\n  margin-top: 15px;\n  border-radius: 8px;\n  overflow: hidden;\n  border: 1px solid #ddd;\n}\n\n.image-preview img {\n  width: 100%;\n  max-height: 200px;\n  object-fit: cover;\n}\n",
  "/components/UserProfile.js": "import React from 'react';\nimport './UserProfile.css';\n\nexport default function UserProfile({ user }) {\n  return (\n    <div className=\"user-profile\">\n      <div className=\"profile-header\">\n        <div className=\"profile-avatar\">\n          <img src={user.avatarUrl} alt={user.name} />\n        </div>\n        <div className=\"profile-info\">\n          <h2>{user.name}</h2>\n          <p className=\"profile-username\">@{user.username}</p>\n          <p className=\"profile-bio\">{user.bio}</p>\n        </div>\n      </div>\n      \n      <div className=\"profile-stats\">\n        <div className=\"stat-item\">\n          <span className=\"stat-value\">{user.memoriesCount}</span>\n          <span className=\"stat-label\">Souvenirs</span>\n        </div>\n        <div className=\"stat-item\">\n          <span className=\"stat-value\">{user.since}</span>\n          <span className=\"stat-label\">Membre depuis</span>\n        </div>\n      </div>\n      \n      <div className=\"profile-actions\">\n        <button className=\"btn btn-primary\">Modifier le profil</button>\n      </div>\n    </div>\n  );\n}\n",
  "/components/UserProfile.css": ".user-profile {\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  padding: 25px;\n  margin-bottom: 30px;\n}\n\n.profile-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.profile-avatar {\n  width: 100px;\n  height: 100px;\n  margin-right: 25px;\n  border-radius: 50%;\n  overflow: hidden;\n  border: 3px solid #4361ee;\n}\n\n.profile-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.profile-info h2 {\n  margin: 0 0 5px 0;\n  color: #2b2d42;\n}\n\n.profile-username {\n  color: #6c757d;\n  margin: 0 0 10px 0;\n  font-size: 0.95rem;\n}\n\n.profile-bio {\n  margin: 0;\n  line-height: 1.4;\n  color: #495057;\n}\n\n.profile-stats {\n  display: flex;\n  margin-bottom: 20px;\n  border-top: 1px solid #eee;\n  border-bottom: 1px solid #eee;\n  padding: 15px 0;\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-right: 40px;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #4361ee;\n}\n\n.stat-label {\n  color: #6c757d;\n  font-size: 0.9rem;\n  margin-top: 5px;\n}\n\n.profile-actions {\n  display: flex;\n  justify-content: flex-start;\n}\n\n@media (max-width: 600px) {\n  .profile-header {\n    flex-direction: column;\n    text-align: center;\n  }\n  \n  .profile-avatar {\n    margin: 0 auto 15px auto;\n  }\n  \n  .profile-stats {\n    justify-content: center;\n  }\n  \n  .profile-actions {\n    justify-content: center;\n  }\n}\n",
  "/pages/Home.js": "import React, { useState, useEffect } from 'react';\nimport MemoryCard from '../components/MemoryCard';\nimport { fetchMemories } from '../services/memoryService';\n\nexport default function Home() {\n  const [memories, setMemories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadMemories = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchMemories();\n        setMemories(data);\n        setError(null);\n      } catch (err) {\n        setError('Erreur lors du chargement des souvenirs');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadMemories();\n  }, []);\n\n  if (loading) {\n    return <div className=\"loading\">Chargement des souvenirs...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"page-title\">Mes Souvenirs</h1>\n      \n      {memories.length === 0 ? (\n        <div className=\"no-memories\">\n          <p>Vous n'avez pas encore de souvenirs enregistrés.</p>\n          <a href=\"/create\" className=\"btn btn-primary\">Créer un souvenir</a>\n        </div>\n      ) : (\n        <div className=\"memories-grid\">\n          {memories.map(memory => (\n            <MemoryCard key={memory.id} memory={memory} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n",
  "/pages/Profile.js": "import React, { useState, useEffect } from 'react';\nimport UserProfile from '../components/UserProfile';\nimport MemoryCard from '../components/MemoryCard';\nimport { fetchUserProfile, fetchUserMemories } from '../services/userService';\n\nexport default function Profile() {\n  const [user, setUser] = useState(null);\n  const [memories, setMemories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadProfileData = async () => {\n      try {\n        setLoading(true);\n        // En pratique, ces appels seraient probablement parallélisés avec Promise.all\n        const userData = await fetchUserProfile();\n        setUser(userData);\n        \n        const userMemories = await fetchUserMemories(userData.id);\n        setMemories(userMemories);\n        \n        setError(null);\n      } catch (err) {\n        setError('Erreur lors du chargement du profil');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadProfileData();\n  }, []);\n\n  if (loading) {\n    return <div className=\"loading\">Chargement du profil...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <UserProfile user={user} />\n      \n      <section className=\"section\">\n        <h2 className=\"section-title\">Mes derniers souvenirs</h2>\n        \n        {memories.length === 0 ? (\n          <div className=\"no-memories\">\n            <p>Vous n'avez pas encore de souvenirs enregistrés.</p>\n            <a href=\"/create\" className=\"btn btn-primary\">Créer un souvenir</a>\n          </div>\n        ) : (\n          <div className=\"memories-grid\">\n            {memories.map(memory => (\n              <MemoryCard key={memory.id} memory={memory} />\n            ))}\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n",
  "/pages/CreateMemory.js": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport MemoryForm from '../components/MemoryForm';\nimport { createMemory } from '../services/memoryService';\n\nexport default function CreateMemory() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  const handleSubmit = async (memoryData) => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      \n      // Appel au service pour créer le souvenir\n      await createMemory(memoryData);\n      \n      // Redirection vers la page d'accueil après succès\n      navigate('/');\n    } catch (err) {\n      setError('Erreur lors de la création du souvenir. Veuillez réessayer.');\n      console.error(err);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"page-title\">Créer un nouveau souvenir</h1>\n      \n      {error && <div className=\"error-alert\">{error}</div>}\n      \n      <MemoryForm onSubmit={handleSubmit} />\n      \n      {isSubmitting && <div className=\"loading\">Création en cours...</div>}\n    </div>\n  );\n}\n",
  "/services/memoryService.js": "// Simule un service qui interagit avec une API\n\n// Données de test\nconst mockMemories = [\n  {\n    id: 1,\n    title: 'Vacances à la plage',\n    date: '2023-07-15',\n    imageUrl: 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e',\n    description: 'Superbes vacances en famille à la plage. Le soleil, la mer et le sable fin.'\n  },\n  {\n    id: 2,\n    title: 'Randonnée en montagne',\n    date: '2023-06-10',\n    imageUrl: 'https://images.unsplash.com/photo-1464822759023-fed622ff2c3b',\n    description: 'Magnifique randonnée dans les Alpes avec une vue imprenable sur les sommets.'\n  },\n  {\n    id: 3,\n    title: 'Anniversaire de Lucas',\n    date: '2023-05-20',\n    imageUrl: 'https://images.unsplash.com/photo-1558636508-e0db3814bd1d',\n    description: 'Fête d\\'anniversaire surprise pour les 30 ans de Lucas. Un moment inoubliable !'\n  },\n  {\n    id: 4,\n    title: 'Concert de jazz',\n    date: '2023-04-05',\n    imageUrl: 'https://images.unsplash.com/photo-1514525253161-7a46d19cd819',\n    description: 'Soirée jazz au club Blue Note. L\\'ambiance était incroyable.'\n  }\n];\n\n// Simule une requête API pour récupérer la liste des souvenirs\nexport const fetchMemories = () => {\n  return new Promise((resolve) => {\n    // Simule un délai réseau\n    setTimeout(() => {\n      resolve(mockMemories);\n    }, 800);\n  });\n};\n\n// Simule une requête API pour créer un nouveau souvenir\nexport const createMemory = (memoryData) => {\n  return new Promise((resolve) => {\n    // Simule un délai réseau\n    setTimeout(() => {\n      // Dans une vraie application, le serveur renverrait l'objet créé avec son ID\n      const newMemory = {\n        id: mockMemories.length + 1,\n        ...memoryData,\n        // Si memoryData.imageUrl est un File, on simulerait l'upload et récupérerait une URL\n        imageUrl: typeof memoryData.imageUrl === 'string' \n          ? memoryData.imageUrl \n          : 'https://images.unsplash.com/photo-1552733407-5d5c46c3bb3b'\n      };\n      \n      // Dans une vraie application, on ajouterait à la base de données\n      mockMemories.push(newMemory);\n      resolve(newMemory);\n    }, 1500);\n  });\n};\n\n// Simule une requête API pour récupérer un souvenir spécifique\nexport const fetchMemoryById = (id) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const memory = mockMemories.find(mem => mem.id === id);\n      if (memory) {\n        resolve(memory);\n      } else {\n        reject(new Error('Souvenir non trouvé'));\n      }\n    }, 500);\n  });\n};\n",
  "/services/userService.js": "// Simule un service qui interagit avec une API pour les données utilisateur\n\n// Données de test\nconst mockUser = {\n  id: 1,\n  name: 'Sophie Martin',\n  username: 'sophiem',\n  email: 'sophie.martin@example.com',\n  avatarUrl: 'https://randomuser.me/api/portraits/women/44.jpg',\n  bio: 'Passionnée de photographie et de voyages. J\\'adore capturer et partager mes souvenirs.',\n  memoriesCount: 27,\n  since: 'Juin 2022'\n};\n\n// Récupère les mêmes souvenirs que dans memoryService mais en les attribuant à l'utilisateur actuel\nimport { fetchMemories } from './memoryService';\n\n// Simule une requête API pour récupérer le profil de l'utilisateur\nexport const fetchUserProfile = () => {\n  return new Promise((resolve) => {\n    // Simule un délai réseau\n    setTimeout(() => {\n      resolve(mockUser);\n    }, 700);\n  });\n};\n\n// Simule une requête API pour récupérer les souvenirs d'un utilisateur spécifique\nexport const fetchUserMemories = (userId) => {\n  return new Promise((resolve) => {\n    // Simule un délai réseau et la récupération de souvenirs spécifiques à l'utilisateur\n    setTimeout(async () => {\n      // Pour simplifier, on réutilise les mêmes souvenirs que dans fetchMemories()\n      const memories = await fetchMemories();\n      resolve(memories);\n    }, 500);\n  });\n};\n\n// Simule une requête API pour mettre à jour le profil utilisateur\nexport const updateUserProfile = (userData) => {\n  return new Promise((resolve) => {\n    // Simule un délai réseau\n    setTimeout(() => {\n      // Fusion des données actuelles avec les nouvelles données\n      const updatedUser = { ...mockUser, ...userData };\n      resolve(updatedUser);\n    }, 1000);\n  });\n};\n",
  "/utils/dateUtils.js": "/**\n * Formate une date au format ISO (YYYY-MM-DD) vers un format plus lisible\n * @param {string} isoDate - Date au format ISO YYYY-MM-DD\n * @returns {string} Date formatée\n */\nexport const formatDate = (isoDate) => {\n  if (!isoDate) return '';\n  \n  const options = { year: 'numeric', month: 'long', day: 'numeric' };\n  const date = new Date(isoDate);\n  \n  return date.toLocaleDateString('fr-FR', options);\n};\n\n/**\n * Calcule le temps écoulé depuis une date donnée\n * @param {string} isoDate - Date au format ISO YYYY-MM-DD\n * @returns {string} Temps écoulé (ex: \"il y a 2 jours\")\n */\nexport const timeAgo = (isoDate) => {\n  if (!isoDate) return '';\n  \n  const now = new Date();\n  const past = new Date(isoDate);\n  const diffTime = Math.abs(now - past);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 0) return 'Aujourd\\'hui';\n  if (diffDays === 1) return 'Hier';\n  if (diffDays < 7) return `Il y a ${diffDays} jours`;\n  if (diffDays < 30) return `Il y a ${Math.floor(diffDays / 7)} semaine${Math.floor(diffDays / 7) > 1 ? 's' : ''}`;\n  if (diffDays < 365) return `Il y a ${Math.floor(diffDays / 30)} mois`;\n  \n  return `Il y a ${Math.floor(diffDays / 365)} an${Math.floor(diffDays / 365) > 1 ? 's' : ''}`;\n};\n"
}